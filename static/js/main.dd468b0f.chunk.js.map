{"version":3,"sources":["components/layout/Header.js","Context.js","components/contacts/Contact.js","components/contacts/Contacts.js","components/layout/TextInputGroup.js","components/contacts/AddContact.js","components/pages/About.js","components/pages/NotFound.js","components/contacts/EditContact.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","branding","className","href","to","defaultProps","Context","React","createContext","reducer","state","action","type","contacts","filter","contact","id","payload","map","Provider","dispatch","setState","componentDidMount","a","Axios","get","res","data","render","value","children","Component","Consumer","Contact","showContactInfo","onShowClick","onDeleteClick","delete","phone","email","name","onClick","style","cursor","float","color","marginRight","Contacts","Fragment","key","TextInputGroup","label","placeholder","onChange","error","htmlFor","classnames","AddContact","errors","onSubmit","e","preventDefault","newContact","post","history","push","target","bind","About","NotFound","EditContact","match","params","response","updateContact","put","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.dd468b0f.chunk.js","sourcesContent":["import React from 'react';\nimport * as PropTypes from \"prop-types\";\nimport {Link} from \"react-router-dom\";\n\nconst Header = (props) => {\n    const {branding} = props;\n    return (\n        <nav className=\"navbar navbar-expand-sm navbar-dark bg-danger mb-3 py-0\">\n            <div className=\"container\">\n                <a href=\"/\" className=\"navbar-brand\">{branding}</a>\n                <div>\n                    <ul className=\"navbar-nav mr-auto\">\n                        <li className=\"nav-item\">\n                            <Link to=\"/\" className=\"nav-link\"><i className={\"fa fa-home\"}/>Home</Link>\n                        </li>\n                        <li className=\"nav-item\">\n                            <Link to=\"/contact/add\" className=\"nav-link\"><i className={\"fa fa-plus\"}/>Add</Link>\n                        </li>\n                        <li className=\"nav-item\">\n                            <Link to=\"/about\" className=\"nav-link\"><i className={\"fa fa-question\"}/>About</Link>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n    );\n};\n\nHeader.defaultProps = {\n    branding: 'My App'\n}\n\nHeader.propTypes = {\n    branding: PropTypes.string.isRequired\n}\n\n// const headingStyle = {\n//     color:'red',\n//     fontSize: '50px'\n// }\n\nexport default Header;","import React, {Component} from 'react';\nimport Axios from \"axios\";\n\nconst Context = React.createContext();\n\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case 'DELETE_CONTACT':\n            return {\n                ...state,\n                contacts: state.contacts.filter(\n                    contact => contact.id !== action.payload)\n            };\n        case 'ADD_CONTACT':\n            return {\n                ...state,\n                contacts: [action.payload, ...state.contacts]\n            };\n        case 'UPDATE_CONTACT':\n            return {\n                ...state,\n                contacts: state.contacts\n                    .map(contact => contact.id === action.payload.id\n                        ? contact = action.payload\n                        : contact)\n            };\n        default:\n            return state;\n    }\n}\n\nexport class Provider extends Component {\n    state = {\n        contacts: [\n            // {id: 1, name: 'John Does', email: 'jdoe@gmail.com', phone: '522-555-555'},\n            // {id: 2, name: 'Karen Does', email: 'karen@gmail.com', phone: '555-555-555'},\n            // {id: 3, name: 'Lilu Does', email: 'ldoe@gmail.com', phone: '335-555-555'}\n        ],\n        dispatch: action => this.setState(state => reducer(state, action))\n    }\n\n\n    componentDidMount = async () => {\n        const res = await Axios.get('https://jsonplaceholder.typicode.com/users');\n        this.setState({contacts: res.data})\n    };\n\n    render = () =>\n        <Context.Provider value={this.state}>\n            {this.props.children}\n        </Context.Provider>;\n}\n\nexport const Consumer = Context.Consumer;","import React, {Component} from 'react';\nimport PropTypes from 'prop-types'\nimport {Consumer} from \"../../Context\";\nimport Axios from \"axios\";\nimport {Link} from \"react-router-dom\";\n\n// import './Contact.css'\n\nclass Contact extends Component {\n    state = {\n        showContactInfo: false\n    };\n    // static propTypes = {\n    //     name: PropTypes.string.isRequired,\n    //     email: PropTypes.string.isRequired,\n    //     phone: PropTypes.string.isRequired\n    // }\n    onShowClick = () => {\n        this.setState({showContactInfo: !this.state.showContactInfo});\n    }\n\n    onDeleteClick = async (id, dispatch) => {\n        try {\n            await Axios.delete(`https://jsonplaceholder.typicode.com/users/${id}`);\n        } finally {\n            dispatch({\n                type: 'DELETE_CONTACT',\n                payload: id\n            });\n        }\n    };\n\n\n    render = () => {\n        const {id, phone, email, name} = this.props.contact;\n        const {showContactInfo} = this.state;\n\n        return (\n            <Consumer>\n                {value => {\n                    const {dispatch} = value;\n                    return (\n                        <div className={'card card-body mb-3'}>\n                            <h4>{name}\n                                <i onClick={this.onShowClick}\n                                   className=\"fa fa-sort-down\"\n                                   style={{cursor: 'pointer'}}/>\n                                <i className=\"fa fa-times\"\n                                   style={{\n                                       cursor: 'pointer',\n                                       float: 'right',\n                                       color: 'red'\n                                   }}\n                                   onClick={() => this.onDeleteClick(id, dispatch)}/>\n                            <Link to={`contact/edit/${id}`}>\n                                <i className=\"fa fa-pencil\"\n                                style={{cursor:'pointer',\n                                float: 'right',\n                                color:'black',\n                                marginRight: '1rem'}}/>\n                            </Link>\n                            </h4>\n                            {showContactInfo ?\n                                <ul className={\"list-group\"}>\n                                    <li className={\"list-group-item\"}>Email: {email}</li>\n                                    <li className={\"list-group-item\"}>Phone: {phone}</li>\n                                </ul>\n                                : null}\n                        </div>)\n                }}\n\n            </Consumer>\n        )\n    }\n}\n\nContact.propTypes = {\n    contact: PropTypes.object.isRequired,\n}\n\nexport default Contact;","import React, {Component} from 'react';\nimport Contact from \"./Contact\";\nimport {Consumer} from \"../../Context\";\n\nclass Contacts extends Component {\n    render = () => <Consumer>\n        {value => {\n            const {contacts} = value;\n            return <React.Fragment>\n                <h1 className=\"display-4 mb-2\"><span className={\"text-danger\"}>Contact</span> List</h1>\n                {contacts.map(contact => (\n                    <Contact key={contact.id}\n                             contact={contact}/>)\n                )}\n            </React.Fragment>\n        }}\n    </Consumer>;\n}\n\nexport default Contacts;","import React from 'react';\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\n\nconst TextInputGroup =\n    ({\n         label,\n         name,\n         value,\n         placeholder,\n         type,\n         onChange,\n         error\n     }) => (\n        <div className=\"form-group\">\n            <label htmlFor={name}>{label}</label>\n            <input type={type}\n                   className={classnames('form-control form-control-lg', {'is-invalid': error})}\n                   placeholder={placeholder}\n                   name={name}\n                   value={value}\n                   onChange={onChange}/>\n            {error && <div className=\"invalid-feedback\">{error}</div>}\n\n        </div>\n    )\n;\n\nTextInputGroup.propTypes = {\n    label: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    placeholder: PropTypes.string.isRequired,\n    value: PropTypes.string.isRequired,\n    type: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n    error: PropTypes.string\n}\n\nTextInputGroup.defaultProps = {\n    type: 'text'\n}\n\nexport default TextInputGroup;","import React, {Component} from 'react';\nimport {Consumer} from \"../../Context\";\nimport TextInputGroup from \"../layout/TextInputGroup\";\nimport Axios from \"axios\";\n\nclass AddContact extends Component {\n    state = {\n        name: '',\n        email: '',\n        phone: '',\n        errors: {}\n    }\n\n    onSubmit = async (dispatch, e) => {\n        e.preventDefault();\n        const {name, email, phone} = this.state;\n        const errors = {};\n        //checkForErrors\n        if (name === '') errors.name = 'Name is required';\n        if (phone === '') errors.phone = 'Phone is required';\n        if (email === '') errors.email = 'Email is required';\n\n        if (name === '' || phone === '' || email === '') {\n            this.setState({errors});\n            return;\n        }\n\n\n        const newContact = {\n            name, email, phone\n        }\n\n        const res = await Axios.post('https://jsonplaceholder.typicode.com/users', newContact);\n        dispatch({\n            type: 'ADD_CONTACT',\n            payload: res.data\n        });\n\n        this.setState({\n            name: '',\n            email: '',\n            phone: '',\n            errors: {}\n        });\n\n        this.props.history.push('/');\n    };\n\n    onChange = (e) => this.setState({[e.target.name]: e.target.value});\n\n    render = () => {\n        const {name, email, phone, errors} = this.state;\n        return (\n            <Consumer>\n                {value => {\n                    const {dispatch} = value;\n                    return (<div>\n                        <div className=\"card mb-3\">\n                            <div className=\"card-header\"> Add Contact</div>\n                            <div className=\"card-body\">\n                                <form onSubmit={this.onSubmit.bind(this, dispatch)}>\n                                    <TextInputGroup label={\"Name\"}\n                                                    name={\"name\"}\n                                                    value={name}\n                                                    onChange={this.onChange}\n                                                    placeholder={\"Enter Name...\"}\n                                                    error={errors.name}/>\n                                    <TextInputGroup label={\"Email\"}\n                                                    name={\"email\"}\n                                                    value={email}\n                                                    onChange={this.onChange}\n                                                    placeholder={\"Enter Email...\"}\n                                                    type={\"email\"}\n                                                    error={errors.email}/>\n                                    <TextInputGroup label={\"Phone\"}\n                                                    name={\"phone\"}\n                                                    value={phone}\n                                                    onChange={this.onChange}\n                                                    placeholder={\"Enter Phone...\"}\n                                                    error={errors.phone}/>\n                                    <input type=\"submit\" value=\"Add Contact\"\n                                           className={\"btn btn-block btn-light\"}/>\n                                </form>\n                            </div>\n                        </div>\n                    </div>)\n                }}\n            </Consumer>\n        );\n    };\n}\n\nexport default AddContact;","import React from 'react';\n\nfunction About() {\n    return (\n        <div>\n            <h1 className=\"display-4\">About Contact Manager</h1>\n            <p className={\"lead\"}>Simple app to manage contacts</p>\n            <p className=\"text-secondary\">1.0.0</p>\n        </div>\n    );\n}\n\nexport default About;","import React from 'react';\n\nfunction NotFound(props) {\n    return (\n        <div><h1 className={\"display-4\"}>\n            <span className={\"text-danger\"}> 404 </span> Not Found\n        </h1>\n            <p className={\"lead\"}> This page does not exists</p></div>\n    );\n}\n\nexport default NotFound;","import React, {Component} from 'react';\nimport {Consumer} from \"../../Context\";\nimport TextInputGroup from \"../layout/TextInputGroup\";\nimport Axios from \"axios\";\n\nclass EditContact extends Component {\n    state = {\n        name: '',\n        email: '',\n        phone: '',\n        errors: {}\n    }\n\n    componentDidMount = async () => {\n        const {id} = this.props.match.params\n        const response = await Axios.get(`https://jsonplaceholder.typicode.com/users/${id}`);\n        const contact = response.data;\n\n        const {phone, email, name} = contact;\n        this.setState({\n            name,\n            email,\n            phone\n        })\n    };\n\n    onSubmit = async (dispatch, e) => {\n        e.preventDefault();\n        const {name, email, phone} = this.state;\n        const errors = {};\n        //checkForErrors\n        if (name === '') errors.name = 'Name is required';\n        if (phone === '') errors.phone = 'Phone is required';\n        if (email === '') errors.email = 'Email is required';\n\n        if (name === '' || phone === '' || email === '') {\n            this.setState({errors});\n            return;\n        }\n\n        const {id} = this.props.match.params;\n\n        const updateContact = {\n            name,\n            email,\n            phone\n        }\n        const res = await Axios.put(`https://jsonplaceholder.typicode.com/users/${id}`,\n            updateContact);\n\n        dispatch({\n            type:'UPDATE_CONTACT',\n            payload: res.data\n        })\n\n            this.setState({\n                name: '',\n                email: '',\n                phone: '',\n                errors: {}\n            });\n\n        this.props.history.push('/');\n    };\n\n    onChange = (e) => this.setState({[e.target.name]: e.target.value});\n\n    render = () => {\n        const {name, email, phone, errors} = this.state;\n        return (\n            <Consumer>\n                {value => {\n                    const {dispatch} = value;\n                    return (<div>\n                        <div className=\"card mb-3\">\n                            <div className=\"card-header\"> Edit Contact</div>\n                            <div className=\"card-body\">\n                                <form onSubmit={this.onSubmit.bind(this, dispatch)}>\n                                    <TextInputGroup label={\"Name\"}\n                                                    name={\"name\"}\n                                                    value={name}\n                                                    onChange={this.onChange}\n                                                    placeholder={\"Enter Name...\"}\n                                                    error={errors.name}/>\n                                    <TextInputGroup label={\"Email\"}\n                                                    name={\"email\"}\n                                                    value={email}\n                                                    onChange={this.onChange}\n                                                    placeholder={\"Enter Email...\"}\n                                                    type={\"email\"}\n                                                    error={errors.email}/>\n                                    <TextInputGroup label={\"Phone\"}\n                                                    name={\"phone\"}\n                                                    value={phone}\n                                                    onChange={this.onChange}\n                                                    placeholder={\"Enter Phone...\"}\n                                                    error={errors.phone}/>\n                                    <input type=\"submit\" value=\"Update Contact\"\n                                           className={\"btn btn-block btn-light\"}/>\n                                </form>\n                            </div>\n                        </div>\n                    </div>)\n                }}\n            </Consumer>\n        );\n    };\n}\n\nexport default EditContact;","import React from 'react';\nimport './App.css';\nimport Header from \"./components/layout/Header\";\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport Contacts from \"./components/contacts/Contacts\";\nimport {Provider} from \"./Context\";\nimport AddContact from \"./components/contacts/AddContact\";\nimport {HashRouter as Router, Route, Switch} from 'react-router-dom'\nimport About from \"./components/pages/About\";\nimport NotFound from \"./components/pages/NotFound\";\nimport EditContact from \"./components/contacts/EditContact\";\n\nclass App extends React.Component {\n    render() {\n        return (\n            <Provider>\n                <Router>\n                    <div className=\"App\">\n                        <Header branding={\"Contact Manager\"}/>\n                        <div className=\"container\">\n                            <Switch>\n                                <Route exact path=\"/\" component={Contacts}/>\n                                <Route exact path=\"/contact/add\" component={AddContact}/>\n                                <Route exact path=\"/contact/edit/:id\" component={EditContact}/>\n                                <Route exact path=\"/about\" component={About}/>\n                                <Route component={NotFound}/>\n                            </Switch>\n                        </div>\n                    </div>\n                </Router>\n            </Provider>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}